(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{498:function(e,t,a){"use strict";a.r(t);var o=a(2),s=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("What are some of the signs and causes of Callback Hell?")]),e._v(" "),a("p",[e._v("Cause is poorly written code, signs are nested callbacks within nested callbacks etc.")]),e._v(" "),a("p",[e._v("What does the asynchronous mean and how are callbacks involved?")]),e._v(" "),a("p",[e._v("Asynchronous part means it doesnt happen right away. The callback may take time to finish")]),e._v(" "),a("p",[e._v("Summarize the 3 ways to avoid / fix Callback Hell")]),e._v(" "),a("p",[e._v("try catch is a good way to prevent excessive nesting. Keep your code shallow - name things appropriately and assume someone who has never seen this code is the one reading it. Modularize - group like data and like functionality. Handle all errors - handle errors as you get them this will prevent a pileup of errors that could get confusing to troubleshoot if you have been ignoring errors in your code.")]),e._v(" "),a("p",[e._v("https://github.com/gofortheeyezboo/latewinter2021-swapi")])])}),[],!1,null,null,null);t.default=s.exports}}]);